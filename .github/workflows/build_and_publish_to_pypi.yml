name: Build and Publish to PyPI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            CIBW_ARCHS_LINUX: "x86_64"
          - os: windows-latest
            CIBW_ARCHS_WINDOWS: "AMD64"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.16.2

      - name: Build wheels
        env:
          # Target Python versions
          CIBW_BUILD: "cp311-* cp312-*"
          # Skip 32-bit and musllinux if unsupported
          CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_i686"

          # Architectures (from matrix)
          CIBW_ARCHS_LINUX: ${{ matrix.CIBW_ARCHS_LINUX }}
          CIBW_ARCHS_WINDOWS: ${{ matrix.CIBW_ARCHS_WINDOWS }}

          # Build-time prerequisites for your Cython extensions
          CIBW_BEFORE_BUILD: pip install "numpy>=2" cython

          # Do not run tests inside manylinux containers
          CIBW_TEST_SKIP: "*-manylinux_*"

          # Optional: run tests for Windows build during cibuildwheel (from temp dir)
          CIBW_TEST_EXTRAS: "full"
          CIBW_TEST_COMMAND_WINDOWS: powershell -Command "Copy-Item -Recurse -Force {project}\tests $env:TEMP\tests_run; Set-Location $env:TEMP\tests_run; python -m pytest . --tb=short --import-mode=importlib"

          CIBW_BUILD_VERBOSITY: 1

        run: python -m cibuildwheel --output-dir wheelhouse

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build "numpy>=2" cython

      - name: Build source distribution
        run: python -m build --sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*

  test-wheels:
    name: Test built wheels on hosts
    needs: [build-wheels, build-sdist]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python: "3.11"
          - os: ubuntu-latest
            python: "3.12"
          - os: windows-latest
            python: "3.11"
          - os: windows-latest
            python: "3.12"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-*
          merge-multiple: true
          path: wheelhouse/

      - name: Upgrade pip
        run: python -m pip install -U pip setuptools wheel

      - name: Install wheel (with full extra)
        shell: bash
        run: |
          python -m pip install --find-links wheelhouse/ "pyorps[full]" --force-reinstall
          python - <<'PY'
          import pyorps, importlib.util
          print("pyorps imported from:", pyorps.__file__)
          spec = importlib.util.find_spec("pyorps.utils.path_algorithms")
          print("pyorps.utils.path_algorithms from:", spec and spec.origin)
          PY

      - name: Run tests on Linux from a temp directory
        if: runner.os == 'Linux'
        shell: bash
        run: |
          TMPDIR=$(mktemp -d)
          cp -r tests "$TMPDIR"/tests_run
          cd "$TMPDIR"
          pytest tests_run --tb=short --import-mode=importlib

      - name: Run tests on Windows from a temp directory
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $tmp = Join-Path $env:TEMP "tests_run_ci"
          New-Item -ItemType Directory -Path $tmp -Force | Out-Null
          Copy-Item -Recurse -Force tests (Join-Path $tmp "tests_run")
          Set-Location $tmp
          python -m pytest tests_run --tb=short --import-mode=importlib

  publish:
    name: Publish to PyPI
    needs: [build-wheels, build-sdist, test-wheels]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          merge-multiple: true
          path: dist/

      - name: Collect distributions
        shell: bash
        run: |
          shopt -s globstar nullglob
          mkdir -p upload
          mv dist/**/*.whl upload/ || true
          mv dist/**/*.tar.gz upload/ || true
          ls -l upload

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: upload
